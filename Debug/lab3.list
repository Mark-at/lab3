
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004944  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b40  08004b40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b40  08004b40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b40  08004b40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003abc4  2000000c  08004b54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003abd0  08004b54  0002abd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d1e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002459  00000000  00000000  00030d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  000331f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d16  00000000  00000000  000342f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae02  00000000  00000000  00035006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001242c  00000000  00000000  0005fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109371  00000000  00000000  00072234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004774  00000000  00000000  0017b5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0017fd1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004ae8 	.word	0x08004ae8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004ae8 	.word	0x08004ae8

080001fc <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
/*void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
	//toggle pin
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}*/
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
	//toggle pin
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	 HAL_TIM_Base_Start_IT(&htim3);
 8000206:	4808      	ldr	r0, [pc, #32]	; (8000228 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000208:	f003 ffc4 	bl	8004194 <HAL_TIM_Base_Start_IT>
	 HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800020c:	2100      	movs	r1, #0
 800020e:	4807      	ldr	r0, [pc, #28]	; (800022c <HAL_GPIO_EXTI_Callback+0x30>)
 8000210:	f000 ffe0 	bl	80011d4 <HAL_DAC_Stop_DMA>

	HAL_DFSDM_FilterRegularStart_DMA (
 8000214:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000218:	4905      	ldr	r1, [pc, #20]	; (8000230 <HAL_GPIO_EXTI_Callback+0x34>)
 800021a:	4806      	ldr	r0, [pc, #24]	; (8000234 <HAL_GPIO_EXTI_Callback+0x38>)
 800021c:	f001 fbf4 	bl	8001a08 <HAL_DFSDM_FilterRegularStart_DMA>
			&hdfsdm1_filter0, (int32_t *) soundArray, 40000);
}
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	200001d4 	.word	0x200001d4
 800022c:	20000028 	.word	0x20000028
 8000230:	20000220 	.word	0x20000220
 8000234:	2000009c 	.word	0x2000009c

08000238 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter){
 8000238:	b580      	push	{r7, lr}
 800023a:	b086      	sub	sp, #24
 800023c:	af02      	add	r7, sp, #8
 800023e:	6078      	str	r0, [r7, #4]
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 8000240:	4821      	ldr	r0, [pc, #132]	; (80002c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 8000242:	f001 fc63 	bl	8001b0c <HAL_DFSDM_FilterRegularStop_DMA>
	HAL_TIM_Base_Stop_IT(&htim3); //stop blinking
 8000246:	4821      	ldr	r0, [pc, #132]	; (80002cc <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 8000248:	f004 f814 	bl	8004274 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000252:	481f      	ldr	r0, [pc, #124]	; (80002d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x98>)
 8000254:	f002 fa0c 	bl	8002670 <HAL_GPIO_WritePin>
	for (int i=0; i< 40000; i++) {
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
 800025c:	e022      	b.n	80002a4 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>
		//soundArrayPro[i] = (uint16_t)((soundArray[i] >> 20) + 2048);
		int32_t sample = soundArray[i] >> 8;
 800025e:	4a1d      	ldr	r2, [pc, #116]	; (80002d4 <HAL_DFSDM_FilterRegConvCpltCallback+0x9c>)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	0a1b      	lsrs	r3, r3, #8
 8000268:	60bb      	str	r3, [r7, #8]
		sample = sample / 16 + 2048;
 800026a:	68bb      	ldr	r3, [r7, #8]
 800026c:	2b00      	cmp	r3, #0
 800026e:	da00      	bge.n	8000272 <HAL_DFSDM_FilterRegConvCpltCallback+0x3a>
 8000270:	330f      	adds	r3, #15
 8000272:	111b      	asrs	r3, r3, #4
 8000274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000278:	60bb      	str	r3, [r7, #8]
		if (sample < 0) sample = 0;
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	2b00      	cmp	r3, #0
 800027e:	da01      	bge.n	8000284 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>
 8000280:	2300      	movs	r3, #0
 8000282:	60bb      	str	r3, [r7, #8]
		if (sample > 4095) sample = 4095;
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800028a:	db02      	blt.n	8000292 <HAL_DFSDM_FilterRegConvCpltCallback+0x5a>
 800028c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000290:	60bb      	str	r3, [r7, #8]
		soundArrayPro[i] = (uint16_t)sample;
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	b299      	uxth	r1, r3
 8000296:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xa0>)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i< 40000; i++) {
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	3301      	adds	r3, #1
 80002a2:	60fb      	str	r3, [r7, #12]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80002aa:	4293      	cmp	r3, r2
 80002ac:	ddd7      	ble.n	800025e <HAL_DFSDM_FilterRegConvCpltCallback+0x26>
	}
		  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)soundArrayPro, 40000, DAC_ALIGN_12B_R);
 80002ae:	2300      	movs	r3, #0
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80002b6:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xa0>)
 80002b8:	2100      	movs	r1, #0
 80002ba:	4808      	ldr	r0, [pc, #32]	; (80002dc <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>)
 80002bc:	f000 febe 	bl	800103c <HAL_DAC_Start_DMA>
}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000009c 	.word	0x2000009c
 80002cc:	200001d4 	.word	0x200001d4
 80002d0:	48000400 	.word	0x48000400
 80002d4:	20000220 	.word	0x20000220
 80002d8:	20027320 	.word	0x20027320
 80002dc:	20000028 	.word	0x20000028

080002e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
//	i=(i+1)%500;
//	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin_Array[i]);
		if (htim == &htim3) HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a06      	ldr	r2, [pc, #24]	; (8000304 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d104      	bne.n	80002fa <HAL_TIM_PeriodElapsedCallback+0x1a>
 80002f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80002f6:	f002 f9d3 	bl	80026a0 <HAL_GPIO_TogglePin>

}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200001d4 	.word	0x200001d4
 8000308:	48000400 	.word	0x48000400

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fcc7 	bl	8000ca2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f812 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f9ca 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800031c:	f000 f996 	bl	800064c <MX_DMA_Init>
  MX_TIM2_Init();
 8000320:	f000 f8f6 	bl	8000510 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000324:	f000 f85c 	bl	80003e0 <MX_DAC1_Init>
  MX_DFSDM1_Init();
 8000328:	f000 f88e 	bl	8000448 <MX_DFSDM1_Init>
  MX_TIM3_Init();
 800032c:	f000 f93e 	bl	80005ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)sin_Array, 500, DAC_ALIGN_12B_R);
  HAL_TIM_Base_Start(&htim2);
 8000330:	4801      	ldr	r0, [pc, #4]	; (8000338 <main+0x2c>)
 8000332:	f003 fec7 	bl	80040c4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000336:	e7fe      	b.n	8000336 <main+0x2a>
 8000338:	20000188 	.word	0x20000188

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b096      	sub	sp, #88	; 0x58
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	2244      	movs	r2, #68	; 0x44
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f004 fba0 	bl	8004a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	60da      	str	r2, [r3, #12]
 800035c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800035e:	2000      	movs	r0, #0
 8000360:	f002 f9f0 	bl	8002744 <HAL_PWREx_ControlVoltageScaling>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800036a:	f000 fa11 	bl	8000790 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800036e:	2310      	movs	r3, #16
 8000370:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800037a:	2360      	movs	r3, #96	; 0x60
 800037c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037e:	2302      	movs	r3, #2
 8000380:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000382:	2301      	movs	r3, #1
 8000384:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000386:	2301      	movs	r3, #1
 8000388:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800038a:	233c      	movs	r3, #60	; 0x3c
 800038c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800038e:	2302      	movs	r3, #2
 8000390:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000392:	2302      	movs	r3, #2
 8000394:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000396:	2302      	movs	r3, #2
 8000398:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039a:	f107 0314 	add.w	r3, r7, #20
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fa74 	bl	800288c <HAL_RCC_OscConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80003aa:	f000 f9f1 	bl	8000790 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ae:	230f      	movs	r3, #15
 80003b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b2:	2303      	movs	r3, #3
 80003b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003c2:	463b      	mov	r3, r7
 80003c4:	2105      	movs	r1, #5
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 fe7a 	bl	80030c0 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003d2:	f000 f9dd 	bl	8000790 <Error_Handler>
  }
}
 80003d6:	bf00      	nop
 80003d8:	3758      	adds	r7, #88	; 0x58
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	; 0x28
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003e6:	463b      	mov	r3, r7
 80003e8:	2228      	movs	r2, #40	; 0x28
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f004 fb4f 	bl	8004a90 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <MX_DAC1_Init+0x60>)
 80003f4:	4a13      	ldr	r2, [pc, #76]	; (8000444 <MX_DAC1_Init+0x64>)
 80003f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003f8:	4811      	ldr	r0, [pc, #68]	; (8000440 <MX_DAC1_Init+0x60>)
 80003fa:	f000 fdfc 	bl	8000ff6 <HAL_DAC_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000404:	f000 f9c4 	bl	8000790 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800040c:	230a      	movs	r3, #10
 800040e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000414:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000422:	463b      	mov	r3, r7
 8000424:	2200      	movs	r2, #0
 8000426:	4619      	mov	r1, r3
 8000428:	4805      	ldr	r0, [pc, #20]	; (8000440 <MX_DAC1_Init+0x60>)
 800042a:	f000 ff37 	bl	800129c <HAL_DAC_ConfigChannel>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000434:	f000 f9ac 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	3728      	adds	r7, #40	; 0x28
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000028 	.word	0x20000028
 8000444:	40007400 	.word	0x40007400

08000448 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 800044e:	4a2c      	ldr	r2, [pc, #176]	; (8000500 <MX_DFSDM1_Init+0xb8>)
 8000450:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000452:	4b2a      	ldr	r3, [pc, #168]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000458:	4b28      	ldr	r3, [pc, #160]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 800045a:	2201      	movs	r2, #1
 800045c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800045e:	4b27      	ldr	r3, [pc, #156]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 8000460:	2201      	movs	r2, #1
 8000462:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8000464:	4b25      	ldr	r3, [pc, #148]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 8000466:	2200      	movs	r2, #0
 8000468:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 120;
 800046a:	4b24      	ldr	r3, [pc, #144]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 800046c:	2278      	movs	r2, #120	; 0x78
 800046e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000470:	4b22      	ldr	r3, [pc, #136]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 8000472:	2201      	movs	r2, #1
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000476:	4821      	ldr	r0, [pc, #132]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 8000478:	f001 f9a6 	bl	80017c8 <HAL_DFSDM_FilterInit>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8000482:	f000 f985 	bl	8000790 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000486:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 8000488:	4a1f      	ldr	r2, [pc, #124]	; (8000508 <MX_DFSDM1_Init+0xc0>)
 800048a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 800048e:	2201      	movs	r2, #1
 8000490:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 50;
 8000498:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 800049a:	2232      	movs	r2, #50	; 0x32
 800049c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80004a4:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80004b6:	4b13      	ldr	r3, [pc, #76]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004b8:	2204      	movs	r2, #4
 80004ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <MX_DFSDM1_Init+0xbc>)
 80004d6:	f001 f8b7 	bl	8001648 <HAL_DFSDM_ChannelInit>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 80004e0:	f000 f956 	bl	8000790 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80004e4:	2201      	movs	r2, #1
 80004e6:	4909      	ldr	r1, [pc, #36]	; (800050c <MX_DFSDM1_Init+0xc4>)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <MX_DFSDM1_Init+0xb4>)
 80004ea:	f001 fa47 	bl	800197c <HAL_DFSDM_FilterConfigRegChannel>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_DFSDM1_Init+0xb0>
  {
    Error_Handler();
 80004f4:	f000 f94c 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000009c 	.word	0x2000009c
 8000500:	40016100 	.word	0x40016100
 8000504:	200000f0 	.word	0x200000f0
 8000508:	40016040 	.word	0x40016040
 800050c:	00020004 	.word	0x00020004

08000510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800052e:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000530:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000534:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <MX_TIM2_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6000;
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000544:	f241 7270 	movw	r2, #6000	; 0x1770
 8000548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054a:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_TIM2_Init+0x98>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000556:	4814      	ldr	r0, [pc, #80]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000558:	f003 fd5c 	bl	8004014 <HAL_TIM_Base_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000562:	f000 f915 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800056a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000574:	f003 ffb4 	bl	80044e0 <HAL_TIM_ConfigClockSource>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800057e:	f000 f907 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000582:	2320      	movs	r3, #32
 8000584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <MX_TIM2_Init+0x98>)
 8000590:	f004 f9d8 	bl	8004944 <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800059a:	f000 f8f9 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000188 	.word	0x20000188

080005ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005ca:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_TIM3_Init+0x98>)
 80005cc:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_TIM3_Init+0x9c>)
 80005ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_TIM3_Init+0x98>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_TIM3_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_TIM3_Init+0x98>)
 80005e0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80005e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_TIM3_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_TIM3_Init+0x98>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005f2:	4814      	ldr	r0, [pc, #80]	; (8000644 <MX_TIM3_Init+0x98>)
 80005f4:	f003 fd0e 	bl	8004014 <HAL_TIM_Base_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80005fe:	f000 f8c7 	bl	8000790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_TIM3_Init+0x98>)
 8000610:	f003 ff66 	bl	80044e0 <HAL_TIM_ConfigClockSource>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800061a:	f000 f8b9 	bl	8000790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <MX_TIM3_Init+0x98>)
 800062c:	f004 f98a 	bl	8004944 <HAL_TIMEx_MasterConfigSynchronization>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000636:	f000 f8ab 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	200001d4 	.word	0x200001d4
 8000648:	40000400 	.word	0x40000400

0800064c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_DMA_Init+0x60>)
 8000654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <MX_DMA_Init+0x60>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6493      	str	r3, [r2, #72]	; 0x48
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_DMA_Init+0x60>)
 8000660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_DMA_Init+0x60>)
 800066c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800066e:	4a0f      	ldr	r2, [pc, #60]	; (80006ac <MX_DMA_Init+0x60>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6493      	str	r3, [r2, #72]	; 0x48
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_DMA_Init+0x60>)
 8000678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	200b      	movs	r0, #11
 8000688:	f000 fc7f 	bl	8000f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800068c:	200b      	movs	r0, #11
 800068e:	f000 fc98 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	200c      	movs	r0, #12
 8000698:	f000 fc77 	bl	8000f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800069c:	200c      	movs	r0, #12
 800069e:	f000 fc90 	bl	8000fc2 <HAL_NVIC_EnableIRQ>

}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a28      	ldr	r2, [pc, #160]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a22      	ldr	r2, [pc, #136]	; (8000784 <MX_GPIO_Init+0xd4>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_GPIO_Init+0xd4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_GPIO_Init+0xd4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_GPIO_Init+0xd4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_GPIO_Init+0xd4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_GPIO_Init+0xd8>)
 800072e:	f001 ff9f 	bl	8002670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000738:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	4810      	ldr	r0, [pc, #64]	; (800078c <MX_GPIO_Init+0xdc>)
 800074a:	f001 fdff 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800074e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_GPIO_Init+0xd8>)
 8000768:	f001 fdf0 	bl	800234c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	2028      	movs	r0, #40	; 0x28
 8000772:	f000 fc0a 	bl	8000f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000776:	2028      	movs	r0, #40	; 0x28
 8000778:	f000 fc23 	bl	8000fc2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	bf00      	nop
 800077e:	3728      	adds	r7, #40	; 0x28
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400
 800078c:	48000800 	.word	0x48000800

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
}
 8000796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000798:	e7fe      	b.n	8000798 <Error_Handler+0x8>
	...

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_MspInit+0x44>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6613      	str	r3, [r2, #96]	; 0x60
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_MspInit+0x44>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c4:	6593      	str	r3, [r2, #88]	; 0x58
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <HAL_DAC_MspInit+0xcc>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d14f      	bne.n	80008a6 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000806:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <HAL_DAC_MspInit+0xd0>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	4a2a      	ldr	r2, [pc, #168]	; (80008b4 <HAL_DAC_MspInit+0xd0>)
 800080c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000810:	6593      	str	r3, [r2, #88]	; 0x58
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <HAL_DAC_MspInit+0xd0>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HAL_DAC_MspInit+0xd0>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a24      	ldr	r2, [pc, #144]	; (80008b4 <HAL_DAC_MspInit+0xd0>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <HAL_DAC_MspInit+0xd0>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000836:	2310      	movs	r3, #16
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f001 fd7e 	bl	800234c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 8000852:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <HAL_DAC_MspInit+0xd8>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 8000858:	2206      	movs	r2, #6
 800085a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 800085e:	2210      	movs	r2, #16
 8000860:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 8000870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000874:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 8000878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 8000880:	2220      	movs	r2, #32
 8000882:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 800088c:	f001 fa90 	bl	8001db0 <HAL_DMA_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000896:	f7ff ff7b 	bl	8000790 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <HAL_DAC_MspInit+0xd4>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40007400 	.word	0x40007400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	2000003c 	.word	0x2000003c
 80008bc:	40020008 	.word	0x40020008

080008c0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0ae      	sub	sp, #184	; 0xb8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	2294      	movs	r2, #148	; 0x94
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f8d5 	bl	8004a90 <memset>
  if(DFSDM1_Init == 0)
 80008e6:	4b45      	ldr	r3, [pc, #276]	; (80009fc <HAL_DFSDM_FilterMspInit+0x13c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d14b      	bne.n	8000986 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80008ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4618      	mov	r0, r3
 8000900:	f002 fe70 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800090a:	f7ff ff41 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <HAL_DFSDM_FilterMspInit+0x140>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	4a3a      	ldr	r2, [pc, #232]	; (8000a00 <HAL_DFSDM_FilterMspInit+0x140>)
 8000916:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000918:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <HAL_DFSDM_FilterMspInit+0x140>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d10b      	bne.n	8000938 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000920:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <HAL_DFSDM_FilterMspInit+0x144>)
 8000922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000924:	4a37      	ldr	r2, [pc, #220]	; (8000a04 <HAL_DFSDM_FilterMspInit+0x144>)
 8000926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800092a:	6613      	str	r3, [r2, #96]	; 0x60
 800092c:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <HAL_DFSDM_FilterMspInit+0x144>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <HAL_DFSDM_FilterMspInit+0x144>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093c:	4a31      	ldr	r2, [pc, #196]	; (8000a04 <HAL_DFSDM_FilterMspInit+0x144>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <HAL_DFSDM_FilterMspInit+0x144>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000950:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800096a:	2306      	movs	r3, #6
 800096c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000970:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000974:	4619      	mov	r1, r3
 8000976:	4824      	ldr	r0, [pc, #144]	; (8000a08 <HAL_DFSDM_FilterMspInit+0x148>)
 8000978:	f001 fce8 	bl	800234c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_DFSDM_FilterMspInit+0x13c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <HAL_DFSDM_FilterMspInit+0x13c>)
 8000984:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <HAL_DFSDM_FilterMspInit+0x14c>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d130      	bne.n	80009f2 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 8000992:	4a20      	ldr	r2, [pc, #128]	; (8000a14 <HAL_DFSDM_FilterMspInit+0x154>)
 8000994:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 8000998:	2256      	movs	r2, #86	; 0x56
 800099a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b4:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009bc:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009cc:	f001 f9f0 	bl	8001db0 <HAL_DMA_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80009d6:	f7ff fedb 	bl	8000790 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_DFSDM_FilterMspInit+0x150>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80009f2:	bf00      	nop
 80009f4:	37b8      	adds	r7, #184	; 0xb8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2003aba4 	.word	0x2003aba4
 8000a00:	2003aba0 	.word	0x2003aba0
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48001000 	.word	0x48001000
 8000a0c:	40016100 	.word	0x40016100
 8000a10:	20000128 	.word	0x20000128
 8000a14:	4002001c 	.word	0x4002001c

08000a18 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0ae      	sub	sp, #184	; 0xb8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	2294      	movs	r2, #148	; 0x94
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f004 f829 	bl	8004a90 <memset>
  if(DFSDM1_Init == 0)
 8000a3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d14b      	bne.n	8000ade <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000a46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fdc4 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000a62:	f7ff fe95 	bl	8000790 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000a6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <HAL_DFSDM_ChannelMspInit+0xd4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10b      	bne.n	8000a90 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a82:	6613      	str	r3, [r2, #96]	; 0x60
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8000a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000aa8:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000acc:	4619      	mov	r1, r3
 8000ace:	4809      	ldr	r0, [pc, #36]	; (8000af4 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8000ad0:	f001 fc3c 	bl	800234c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4a03      	ldr	r2, [pc, #12]	; (8000ae8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8000adc:	6013      	str	r3, [r2, #0]
  }

}
 8000ade:	bf00      	nop
 8000ae0:	37b8      	adds	r7, #184	; 0xb8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2003aba4 	.word	0x2003aba4
 8000aec:	2003aba0 	.word	0x2003aba0
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48001000 	.word	0x48001000

08000af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b08:	d114      	bne.n	8000b34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_TIM_Base_MspInit+0x78>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a18      	ldr	r2, [pc, #96]	; (8000b70 <HAL_TIM_Base_MspInit+0x78>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <HAL_TIM_Base_MspInit+0x78>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	201c      	movs	r0, #28
 8000b28:	f000 fa2f 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b2c:	201c      	movs	r0, #28
 8000b2e:	f000 fa48 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b32:	e018      	b.n	8000b66 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_TIM_Base_MspInit+0x7c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d113      	bne.n	8000b66 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_TIM_Base_MspInit+0x78>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <HAL_TIM_Base_MspInit+0x78>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6593      	str	r3, [r2, #88]	; 0x58
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_TIM_Base_MspInit+0x78>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	201d      	movs	r0, #29
 8000b5c:	f000 fa15 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b60:	201d      	movs	r0, #29
 8000b62:	f000 fa2e 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40000400 	.word	0x40000400

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f8c2 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <DMA1_Channel1_IRQHandler+0x10>)
 8000bd2:	f001 fa6c 	bl	80020ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000003c 	.word	0x2000003c

08000be0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <DMA1_Channel2_IRQHandler+0x10>)
 8000be6:	f001 fa62 	bl	80020ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000128 	.word	0x20000128

08000bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM2_IRQHandler+0x10>)
 8000bfa:	f003 fb6a 	bl	80042d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000188 	.word	0x20000188

08000c08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM3_IRQHandler+0x10>)
 8000c0e:	f003 fb60 	bl	80042d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001d4 	.word	0x200001d4

08000c1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c24:	f001 fd56 	bl	80026d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	; (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 ff0f 	bl	8004aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fb43 	bl	800030c <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c88:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c94:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 8000c98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c9c:	2003abd0 	.word	0x2003abd0

08000ca0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_IRQHandler>

08000ca2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f961 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f80e 	bl	8000cd4 <HAL_InitTick>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	e001      	b.n	8000cc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cc4:	f7ff fd6a 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <HAL_InitTick+0x6c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d023      	beq.n	8000d30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <HAL_InitTick+0x70>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <HAL_InitTick+0x6c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f96d 	bl	8000fde <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d809      	bhi.n	8000d24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f937 	bl	8000f8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_InitTick+0x74>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	e007      	b.n	8000d34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e004      	b.n	8000d34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]
 8000d2e:	e001      	b.n	8000d34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	2003aba8 	.word	0x2003aba8

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2003aba8 	.word	0x2003aba8

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff29 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff3e 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff31 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffa2 	bl	8000f30 <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e014      	b.n	8001032 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	791b      	ldrb	r3, [r3, #4]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d105      	bne.n	800101e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fbe3 	bl	80007e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2202      	movs	r2, #2
 8001022:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	795b      	ldrb	r3, [r3, #5]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_DAC_Start_DMA+0x1e>
 8001056:	2302      	movs	r3, #2
 8001058:	e0ab      	b.n	80011b2 <HAL_DAC_Start_DMA+0x176>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2201      	movs	r2, #1
 800105e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2202      	movs	r2, #2
 8001064:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d12f      	bne.n	80010cc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a52      	ldr	r2, [pc, #328]	; (80011bc <HAL_DAC_Start_DMA+0x180>)
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a51      	ldr	r2, [pc, #324]	; (80011c0 <HAL_DAC_Start_DMA+0x184>)
 800107a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a50      	ldr	r2, [pc, #320]	; (80011c4 <HAL_DAC_Start_DMA+0x188>)
 8001082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001092:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d013      	beq.n	80010c2 <HAL_DAC_Start_DMA+0x86>
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	2b08      	cmp	r3, #8
 800109e:	d845      	bhi.n	800112c <HAL_DAC_Start_DMA+0xf0>
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_DAC_Start_DMA+0x72>
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d005      	beq.n	80010b8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80010ac:	e03e      	b.n	800112c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3308      	adds	r3, #8
 80010b4:	613b      	str	r3, [r7, #16]
        break;
 80010b6:	e03c      	b.n	8001132 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	330c      	adds	r3, #12
 80010be:	613b      	str	r3, [r7, #16]
        break;
 80010c0:	e037      	b.n	8001132 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3310      	adds	r3, #16
 80010c8:	613b      	str	r3, [r7, #16]
        break;
 80010ca:	e032      	b.n	8001132 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	4a3d      	ldr	r2, [pc, #244]	; (80011c8 <HAL_DAC_Start_DMA+0x18c>)
 80010d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4a3c      	ldr	r2, [pc, #240]	; (80011cc <HAL_DAC_Start_DMA+0x190>)
 80010da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a3b      	ldr	r2, [pc, #236]	; (80011d0 <HAL_DAC_Start_DMA+0x194>)
 80010e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010f2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d013      	beq.n	8001122 <HAL_DAC_Start_DMA+0xe6>
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d817      	bhi.n	8001130 <HAL_DAC_Start_DMA+0xf4>
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_DAC_Start_DMA+0xd2>
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	2b04      	cmp	r3, #4
 800110a:	d005      	beq.n	8001118 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800110c:	e010      	b.n	8001130 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3314      	adds	r3, #20
 8001114:	613b      	str	r3, [r7, #16]
        break;
 8001116:	e00c      	b.n	8001132 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3318      	adds	r3, #24
 800111e:	613b      	str	r3, [r7, #16]
        break;
 8001120:	e007      	b.n	8001132 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	331c      	adds	r3, #28
 8001128:	613b      	str	r3, [r7, #16]
        break;
 800112a:	e002      	b.n	8001132 <HAL_DAC_Start_DMA+0xf6>
        break;
 800112c:	bf00      	nop
 800112e:	e000      	b.n	8001132 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001130:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d111      	bne.n	800115c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001146:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	f000 fed5 	bl	8001f00 <HAL_DMA_Start_IT>
 8001156:	4603      	mov	r3, r0
 8001158:	75fb      	strb	r3, [r7, #23]
 800115a:	e010      	b.n	800117e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800116a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	68d8      	ldr	r0, [r3, #12]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	f000 fec3 	bl	8001f00 <HAL_DMA_Start_IT>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2200      	movs	r2, #0
 8001182:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6819      	ldr	r1, [r3, #0]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2201      	movs	r2, #1
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e005      	b.n	80011b0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	f043 0204 	orr.w	r2, r3, #4
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	08001535 	.word	0x08001535
 80011c0:	08001557 	.word	0x08001557
 80011c4:	08001573 	.word	0x08001573
 80011c8:	080015dd 	.word	0x080015dd
 80011cc:	080015ff 	.word	0x080015ff
 80011d0:	0800161b 	.word	0x0800161b

080011d4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f003 0310 	and.w	r3, r3, #16
 80011ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	400a      	ands	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2201      	movs	r2, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	400a      	ands	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10d      	bne.n	800123a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fee7 	bl	8001ff6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e00c      	b.n	8001254 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fed9 	bl	8001ff6 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001252:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	795b      	ldrb	r3, [r3, #5]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <HAL_DAC_ConfigChannel+0x1c>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e137      	b.n	8001528 <HAL_DAC_ConfigChannel+0x28c>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2202      	movs	r2, #2
 80012c2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	f040 8081 	bne.w	80013d0 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80012ce:	f7ff fd51 	bl	8000d74 <HAL_GetTick>
 80012d2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d140      	bne.n	800135c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012da:	e018      	b.n	800130e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012dc:	f7ff fd4a 	bl	8000d74 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d911      	bls.n	800130e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00a      	beq.n	800130e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f043 0208 	orr.w	r2, r3, #8
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2203      	movs	r2, #3
 8001308:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e10c      	b.n	8001528 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1df      	bne.n	80012dc <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fd35 	bl	8000d8c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	69d2      	ldr	r2, [r2, #28]
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
 800132c:	e023      	b.n	8001376 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800132e:	f7ff fd21 	bl	8000d74 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d90f      	bls.n	800135c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001342:	2b00      	cmp	r3, #0
 8001344:	da0a      	bge.n	800135c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f043 0208 	orr.w	r2, r3, #8
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2203      	movs	r2, #3
 8001356:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0e5      	b.n	8001528 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	2b00      	cmp	r3, #0
 8001364:	dbe3      	blt.n	800132e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001366:	2001      	movs	r0, #1
 8001368:	f7ff fd10 	bl	8000d8c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	69d2      	ldr	r2, [r2, #28]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	ea02 0103 	and.w	r1, r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	6a1a      	ldr	r2, [r3, #32]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	21ff      	movs	r1, #255	; 0xff
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	ea02 0103 	and.w	r1, r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d11d      	bne.n	8001414 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	221f      	movs	r2, #31
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	4313      	orrs	r3, r2
 800140a:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2207      	movs	r2, #7
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	4013      	ands	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	431a      	orrs	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69fa      	ldr	r2, [r7, #28]
 8001450:	4313      	orrs	r3, r2
 8001452:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43da      	mvns	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	400a      	ands	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f003 0310 	and.w	r3, r3, #16
 8001488:	f640 72fe 	movw	r2, #4094	; 0xffe
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	4013      	ands	r3, r2
 8001496:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b8:	d104      	bne.n	80014c4 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e018      	b.n	80014f6 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d104      	bne.n	80014d6 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	e00f      	b.n	80014f6 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80014d6:	f001 ffb9 	bl	800344c <HAL_RCC_GetHCLKFreq>
 80014da:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4a14      	ldr	r2, [pc, #80]	; (8001530 <HAL_DAC_ConfigChannel+0x294>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d904      	bls.n	80014ee <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	e003      	b.n	80014f6 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014f4:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	22c0      	movs	r2, #192	; 0xc0
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43da      	mvns	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	04c4b400 	.word	0x04c4b400

08001534 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff fe8b 	bl	800125e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	711a      	strb	r2, [r3, #4]
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff fe84 	bl	8001272 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	f043 0204 	orr.w	r2, r3, #4
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff fe7a 	bl	8001286 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2201      	movs	r2, #1
 8001596:	711a      	strb	r2, [r3, #4]
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f7ff ffd8 	bl	80015a0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2201      	movs	r2, #1
 80015f4:	711a      	strb	r2, [r3, #4]
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b084      	sub	sp, #16
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ffd1 	bl	80015b4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f043 0204 	orr.w	r2, r3, #4
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff ffc7 	bl	80015c8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2201      	movs	r2, #1
 800163e:	711a      	strb	r2, [r3, #4]
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0ac      	b.n	80017b4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fab6 	bl	8001bd0 <DFSDM_GetChannelFromInstance>
 8001664:	4603      	mov	r3, r0
 8001666:	4a55      	ldr	r2, [pc, #340]	; (80017bc <HAL_DFSDM_ChannelInit+0x174>)
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e09f      	b.n	80017b4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff f9cf 	bl	8000a18 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_DFSDM_ChannelInit+0x178>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a4f      	ldr	r2, [pc, #316]	; (80017c0 <HAL_DFSDM_ChannelInit+0x178>)
 8001682:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001684:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <HAL_DFSDM_ChannelInit+0x178>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d125      	bne.n	80016d8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800168c:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 8001692:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001696:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001698:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4948      	ldr	r1, [pc, #288]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ac:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80016b0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	791b      	ldrb	r3, [r3, #4]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d108      	bne.n	80016cc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	493f      	ldr	r1, [pc, #252]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80016cc:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a3c      	ldr	r2, [pc, #240]	; (80017c4 <HAL_DFSDM_ChannelInit+0x17c>)
 80016d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016d6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80016e6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6819      	ldr	r1, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016f6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016fc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 020f 	bic.w	r2, r2, #15
 8001714:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6819      	ldr	r1, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800173c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6899      	ldr	r1, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f002 0207 	and.w	r2, r2, #7
 8001768:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001794:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 fa14 	bl	8001bd0 <DFSDM_GetChannelFromInstance>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4904      	ldr	r1, [pc, #16]	; (80017bc <HAL_DFSDM_ChannelInit+0x174>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2003abb0 	.word	0x2003abb0
 80017c0:	2003abac 	.word	0x2003abac
 80017c4:	40016000 	.word	0x40016000

080017c8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0ca      	b.n	8001970 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a66      	ldr	r2, [pc, #408]	; (8001978 <HAL_DFSDM_FilterInit+0x1b0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d109      	bne.n	80017f8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d003      	beq.n	80017f4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0bb      	b.n	8001970 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff f855 	bl	80008c0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001824:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7a1b      	ldrb	r3, [r3, #8]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e007      	b.n	8001850 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800184e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7a5b      	ldrb	r3, [r3, #9]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e007      	b.n	800187a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001888:	f023 0308 	bic.w	r3, r3, #8
 800188c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d108      	bne.n	80018a8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7c1b      	ldrb	r3, [r3, #16]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d108      	bne.n	80018c2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0210 	orr.w	r2, r2, #16
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e007      	b.n	80018d2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0210 	bic.w	r2, r2, #16
 80018d0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	7c5b      	ldrb	r3, [r3, #17]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d108      	bne.n	80018ec <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0220 	orr.w	r2, r2, #32
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e007      	b.n	80018fc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0220 	bic.w	r2, r2, #32
 80018fa:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800190a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800190e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6959      	ldr	r1, [r3, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	3b01      	subs	r3, #1
 8001920:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001922:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800192a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699a      	ldr	r2, [r3, #24]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7c1a      	ldrb	r2, [r3, #16]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40016100 	.word	0x40016100

0800197c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d02e      	beq.n	80019f4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800199c:	2bff      	cmp	r3, #255	; 0xff
 800199e:	d029      	beq.n	80019f4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10d      	bne.n	80019d6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80019c8:	431a      	orrs	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	e00a      	b.n	80019ec <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
 80019f2:	e001      	b.n	80019f8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
 8001a28:	e064      	b.n	8001af4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a38:	d002      	beq.n	8001a40 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
 8001a3e:	e059      	b.n	8001af4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10e      	bne.n	8001a66 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10a      	bne.n	8001a66 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d002      	beq.n	8001a66 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e046      	b.n	8001af4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10b      	bne.n	8001a86 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d102      	bne.n	8001a86 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	75fb      	strb	r3, [r7, #23]
 8001a84:	e036      	b.n	8001af4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d004      	beq.n	8001a9a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d12a      	bne.n	8001af0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001ab6:	e000      	b.n	8001aba <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001ab8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	331c      	adds	r3, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f000 fa16 	bl	8001f00 <HAL_DMA_Start_IT>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	22ff      	movs	r2, #255	; 0xff
 8001ade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001ae6:	e005      	b.n	8001af4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f8bd 	bl	8001c68 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001aee:	e001      	b.n	8001af4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	08001b91 	.word	0x08001b91
 8001b04:	08001bad 	.word	0x08001bad
 8001b08:	08001b75 	.word	0x08001b75

08001b0c <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d007      	beq.n	8001b32 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d002      	beq.n	8001b32 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73fb      	strb	r3, [r7, #15]
 8001b30:	e007      	b.n	8001b42 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fa5d 	bl	8001ff6 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f8e9 	bl	8001d14 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f7ff ffe2 	bl	8001b4c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7fe fb4a 	bl	8000238 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff ffcd 	bl	8001b60 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <DFSDM_GetChannelFromInstance+0x7c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d102      	bne.n	8001be6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e02b      	b.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <DFSDM_GetChannelFromInstance+0x80>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d102      	bne.n	8001bf4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	e024      	b.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <DFSDM_GetChannelFromInstance+0x84>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e01d      	b.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <DFSDM_GetChannelFromInstance+0x88>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d102      	bne.n	8001c10 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	e016      	b.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <DFSDM_GetChannelFromInstance+0x8c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d102      	bne.n	8001c1e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e00f      	b.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <DFSDM_GetChannelFromInstance+0x90>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d102      	bne.n	8001c2c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001c26:	2306      	movs	r3, #6
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e008      	b.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <DFSDM_GetChannelFromInstance+0x94>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d102      	bne.n	8001c3a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c34:	2307      	movs	r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	e001      	b.n	8001c3e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40016000 	.word	0x40016000
 8001c50:	40016020 	.word	0x40016020
 8001c54:	40016040 	.word	0x40016040
 8001c58:	40016080 	.word	0x40016080
 8001c5c:	400160a0 	.word	0x400160a0
 8001c60:	400160c0 	.word	0x400160c0
 8001c64:	400160e0 	.word	0x400160e0

08001c68 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d108      	bne.n	8001c8a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e033      	b.n	8001cf2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0201 	bic.w	r2, r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0201 	orr.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d116      	bne.n	8001cf2 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0202 	orr.w	r2, r2, #2
 8001cda:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <DFSDM_RegConvStart+0x84>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	e000      	b.n	8001cee <DFSDM_RegConvStart+0x86>
 8001cec:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <DFSDM_RegConvStart+0x98>
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	e000      	b.n	8001d02 <DFSDM_RegConvStart+0x9a>
 8001d00:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d116      	bne.n	8001d8c <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d107      	bne.n	8001d76 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0202 	orr.w	r2, r2, #2
 8001d74:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <DFSDM_RegConvStop+0x72>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	e000      	b.n	8001d88 <DFSDM_RegConvStop+0x74>
 8001d86:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d101      	bne.n	8001d9a <DFSDM_RegConvStop+0x86>
 8001d96:	2201      	movs	r2, #1
 8001d98:	e000      	b.n	8001d9c <DFSDM_RegConvStop+0x88>
 8001d9a:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e08d      	b.n	8001ede <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_DMA_Init+0x138>)
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d80f      	bhi.n	8001dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b45      	ldr	r3, [pc, #276]	; (8001eec <HAL_DMA_Init+0x13c>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_DMA_Init+0x140>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	009a      	lsls	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_DMA_Init+0x144>)
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
 8001dec:	e00e      	b.n	8001e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <HAL_DMA_Init+0x148>)
 8001df6:	4413      	add	r3, r2
 8001df8:	4a3d      	ldr	r2, [pc, #244]	; (8001ef0 <HAL_DMA_Init+0x140>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a3c      	ldr	r2, [pc, #240]	; (8001efc <HAL_DMA_Init+0x14c>)
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fa12 	bl	8002288 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e6c:	d102      	bne.n	8001e74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_DMA_Init+0x104>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d80c      	bhi.n	8001eb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fa32 	bl	8002304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	e008      	b.n	8001ec6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40020407 	.word	0x40020407
 8001eec:	bffdfff8 	.word	0xbffdfff8
 8001ef0:	cccccccd 	.word	0xcccccccd
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	bffdfbf8 	.word	0xbffdfbf8
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_DMA_Start_IT+0x20>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e066      	b.n	8001fee <HAL_DMA_Start_IT+0xee>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d155      	bne.n	8001fe0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 f957 	bl	800220c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 020e 	orr.w	r2, r2, #14
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	e00f      	b.n	8001f98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0204 	bic.w	r2, r2, #4
 8001f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 020a 	orr.w	r2, r2, #10
 8001f96:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fcc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e005      	b.n	8001fec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d008      	beq.n	8002020 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e040      	b.n	80020a2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020e 	bic.w	r2, r2, #14
 800202e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800203e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f003 021c 	and.w	r2, r3, #28
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800206c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002084:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800208e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 031c 	and.w	r3, r3, #28
 80020ce:	2204      	movs	r2, #4
 80020d0:	409a      	lsls	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d026      	beq.n	8002128 <HAL_DMA_IRQHandler+0x7a>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d021      	beq.n	8002128 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d107      	bne.n	8002102 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0204 	bic.w	r2, r2, #4
 8002100:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f003 021c 	and.w	r2, r3, #28
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2104      	movs	r1, #4
 8002110:	fa01 f202 	lsl.w	r2, r1, r2
 8002114:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	2b00      	cmp	r3, #0
 800211c:	d071      	beq.n	8002202 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002126:	e06c      	b.n	8002202 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f003 031c 	and.w	r3, r3, #28
 8002130:	2202      	movs	r2, #2
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d02e      	beq.n	800219a <HAL_DMA_IRQHandler+0xec>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d029      	beq.n	800219a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10b      	bne.n	800216c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020a 	bic.w	r2, r2, #10
 8002162:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f003 021c 	and.w	r2, r3, #28
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	2102      	movs	r1, #2
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d038      	beq.n	8002202 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002198:	e033      	b.n	8002202 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 031c 	and.w	r3, r3, #28
 80021a2:	2208      	movs	r2, #8
 80021a4:	409a      	lsls	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4013      	ands	r3, r2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d02a      	beq.n	8002204 <HAL_DMA_IRQHandler+0x156>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d025      	beq.n	8002204 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 020e 	bic.w	r2, r2, #14
 80021c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f003 021c 	and.w	r2, r3, #28
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	2101      	movs	r1, #1
 80021d6:	fa01 f202 	lsl.w	r2, r1, r2
 80021da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002202:	bf00      	nop
 8002204:	bf00      	nop
}
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002222:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	2b00      	cmp	r3, #0
 800222a:	d004      	beq.n	8002236 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002234:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f003 021c 	and.w	r2, r3, #28
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2101      	movs	r1, #1
 8002244:	fa01 f202 	lsl.w	r2, r1, r2
 8002248:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b10      	cmp	r3, #16
 8002258:	d108      	bne.n	800226c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800226a:	e007      	b.n	800227c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	60da      	str	r2, [r3, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002298:	429a      	cmp	r2, r3
 800229a:	d80a      	bhi.n	80022b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022a8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6493      	str	r3, [r2, #72]	; 0x48
 80022b0:	e007      	b.n	80022c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	009a      	lsls	r2, r3, #2
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80022bc:	4413      	add	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3b08      	subs	r3, #8
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80022d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2201      	movs	r2, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	40020407 	.word	0x40020407
 80022f8:	4002081c 	.word	0x4002081c
 80022fc:	cccccccd 	.word	0xcccccccd
 8002300:	40020880 	.word	0x40020880

08002304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a08      	ldr	r2, [pc, #32]	; (8002348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002326:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3b01      	subs	r3, #1
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2201      	movs	r2, #1
 8002332:	409a      	lsls	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	1000823f 	.word	0x1000823f
 8002348:	40020940 	.word	0x40020940

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235a:	e166      	b.n	800262a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8158 	beq.w	8002624 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d005      	beq.n	800238c <HAL_GPIO_Init+0x40>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d130      	bne.n	80023ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c2:	2201      	movs	r2, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0201 	and.w	r2, r3, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d017      	beq.n	800242a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d123      	bne.n	800247e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	6939      	ldr	r1, [r7, #16]
 800247a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80b2 	beq.w	8002624 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c0:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_GPIO_Init+0x2fc>)
 80024c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c4:	4a60      	ldr	r2, [pc, #384]	; (8002648 <HAL_GPIO_Init+0x2fc>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6613      	str	r3, [r2, #96]	; 0x60
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_GPIO_Init+0x2fc>)
 80024ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024d8:	4a5c      	ldr	r2, [pc, #368]	; (800264c <HAL_GPIO_Init+0x300>)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002502:	d02b      	beq.n	800255c <HAL_GPIO_Init+0x210>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_GPIO_Init+0x304>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d025      	beq.n	8002558 <HAL_GPIO_Init+0x20c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a51      	ldr	r2, [pc, #324]	; (8002654 <HAL_GPIO_Init+0x308>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d01f      	beq.n	8002554 <HAL_GPIO_Init+0x208>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_GPIO_Init+0x30c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d019      	beq.n	8002550 <HAL_GPIO_Init+0x204>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a4f      	ldr	r2, [pc, #316]	; (800265c <HAL_GPIO_Init+0x310>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <HAL_GPIO_Init+0x200>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a4e      	ldr	r2, [pc, #312]	; (8002660 <HAL_GPIO_Init+0x314>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00d      	beq.n	8002548 <HAL_GPIO_Init+0x1fc>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a4d      	ldr	r2, [pc, #308]	; (8002664 <HAL_GPIO_Init+0x318>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d007      	beq.n	8002544 <HAL_GPIO_Init+0x1f8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4c      	ldr	r2, [pc, #304]	; (8002668 <HAL_GPIO_Init+0x31c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_GPIO_Init+0x1f4>
 800253c:	2307      	movs	r3, #7
 800253e:	e00e      	b.n	800255e <HAL_GPIO_Init+0x212>
 8002540:	2308      	movs	r3, #8
 8002542:	e00c      	b.n	800255e <HAL_GPIO_Init+0x212>
 8002544:	2306      	movs	r3, #6
 8002546:	e00a      	b.n	800255e <HAL_GPIO_Init+0x212>
 8002548:	2305      	movs	r3, #5
 800254a:	e008      	b.n	800255e <HAL_GPIO_Init+0x212>
 800254c:	2304      	movs	r3, #4
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x212>
 8002550:	2303      	movs	r3, #3
 8002552:	e004      	b.n	800255e <HAL_GPIO_Init+0x212>
 8002554:	2302      	movs	r3, #2
 8002556:	e002      	b.n	800255e <HAL_GPIO_Init+0x212>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <HAL_GPIO_Init+0x212>
 800255c:	2300      	movs	r3, #0
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	f002 0203 	and.w	r2, r2, #3
 8002564:	0092      	lsls	r2, r2, #2
 8002566:	4093      	lsls	r3, r2
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800256e:	4937      	ldr	r1, [pc, #220]	; (800264c <HAL_GPIO_Init+0x300>)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	089b      	lsrs	r3, r3, #2
 8002574:	3302      	adds	r3, #2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800257c:	4b3b      	ldr	r3, [pc, #236]	; (800266c <HAL_GPIO_Init+0x320>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025a0:	4a32      	ldr	r2, [pc, #200]	; (800266c <HAL_GPIO_Init+0x320>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_GPIO_Init+0x320>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025ca:	4a28      	ldr	r2, [pc, #160]	; (800266c <HAL_GPIO_Init+0x320>)
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025d0:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_GPIO_Init+0x320>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43db      	mvns	r3, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025f4:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_GPIO_Init+0x320>)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <HAL_GPIO_Init+0x320>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800261e:	4a13      	ldr	r2, [pc, #76]	; (800266c <HAL_GPIO_Init+0x320>)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	f47f ae91 	bne.w	800235c <HAL_GPIO_Init+0x10>
  }
}
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40021000 	.word	0x40021000
 800264c:	40010000 	.word	0x40010000
 8002650:	48000400 	.word	0x48000400
 8002654:	48000800 	.word	0x48000800
 8002658:	48000c00 	.word	0x48000c00
 800265c:	48001000 	.word	0x48001000
 8002660:	48001400 	.word	0x48001400
 8002664:	48001800 	.word	0x48001800
 8002668:	48001c00 	.word	0x48001c00
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	807b      	strh	r3, [r7, #2]
 800267c:	4613      	mov	r3, r2
 800267e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002680:	787b      	ldrb	r3, [r7, #1]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800268c:	e002      	b.n	8002694 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	43d9      	mvns	r1, r3
 80026be:	887b      	ldrh	r3, [r7, #2]
 80026c0:	400b      	ands	r3, r1
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ec:	88fb      	ldrh	r3, [r7, #6]
 80026ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd fd82 	bl	80001fc <HAL_GPIO_EXTI_Callback>
  }
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40010400 	.word	0x40010400

08002704 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_PWREx_GetVoltageRange+0x3c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002714:	d102      	bne.n	800271c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800271a:	e00b      	b.n	8002734 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <HAL_PWREx_GetVoltageRange+0x3c>)
 800271e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272a:	d102      	bne.n	8002732 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800272c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002730:	e000      	b.n	8002734 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002732:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40007000 	.word	0x40007000

08002744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d141      	bne.n	80027d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002752:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275e:	d131      	bne.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002760:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002766:	4a46      	ldr	r2, [pc, #280]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800276c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002770:	4b43      	ldr	r3, [pc, #268]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002778:	4a41      	ldr	r2, [pc, #260]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800277a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002780:	4b40      	ldr	r3, [pc, #256]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2232      	movs	r2, #50	; 0x32
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	4a3f      	ldr	r2, [pc, #252]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	0c9b      	lsrs	r3, r3, #18
 8002792:	3301      	adds	r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002796:	e002      	b.n	800279e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3b01      	subs	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d102      	bne.n	80027b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f2      	bne.n	8002798 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b2:	4b33      	ldr	r3, [pc, #204]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027be:	d158      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e057      	b.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ca:	4a2d      	ldr	r2, [pc, #180]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80027d4:	e04d      	b.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027dc:	d141      	bne.n	8002862 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027de:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ea:	d131      	bne.n	8002850 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f2:	4a23      	ldr	r2, [pc, #140]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2232      	movs	r2, #50	; 0x32
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9b      	lsrs	r3, r3, #18
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002822:	e002      	b.n	800282a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	3b01      	subs	r3, #1
 8002828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002836:	d102      	bne.n	800283e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f2      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284a:	d112      	bne.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e011      	b.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002856:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002860:	e007      	b.n	8002872 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002870:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40007000 	.word	0x40007000
 8002884:	20000000 	.word	0x20000000
 8002888:	431bde83 	.word	0x431bde83

0800288c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f000 bc08 	b.w	80030b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a0:	4b96      	ldr	r3, [pc, #600]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028aa:	4b94      	ldr	r3, [pc, #592]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80e4 	beq.w	8002a8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4c>
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	f040 808b 	bne.w	80029e6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	f040 8087 	bne.w	80029e6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d8:	4b88      	ldr	r3, [pc, #544]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_OscConfig+0x64>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e3df      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1a      	ldr	r2, [r3, #32]
 80028f4:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <HAL_RCC_OscConfig+0x7e>
 8002900:	4b7e      	ldr	r3, [pc, #504]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002908:	e005      	b.n	8002916 <HAL_RCC_OscConfig+0x8a>
 800290a:	4b7c      	ldr	r3, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 800290c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002916:	4293      	cmp	r3, r2
 8002918:	d223      	bcs.n	8002962 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fda0 	bl	8003464 <RCC_SetFlashLatencyFromMSIRange>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e3c0      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800292e:	4b73      	ldr	r3, [pc, #460]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a72      	ldr	r2, [pc, #456]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b70      	ldr	r3, [pc, #448]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	496d      	ldr	r1, [pc, #436]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294c:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	4968      	ldr	r1, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
 8002960:	e025      	b.n	80029ae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002962:	4b66      	ldr	r3, [pc, #408]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a65      	ldr	r2, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4960      	ldr	r1, [pc, #384]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002980:	4b5e      	ldr	r3, [pc, #376]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	495b      	ldr	r1, [pc, #364]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002990:	4313      	orrs	r3, r2
 8002992:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fd60 	bl	8003464 <RCC_SetFlashLatencyFromMSIRange>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e380      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ae:	f000 fcc1 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b51      	ldr	r3, [pc, #324]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4950      	ldr	r1, [pc, #320]	; (8002b00 <HAL_RCC_OscConfig+0x274>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	4a4e      	ldr	r2, [pc, #312]	; (8002b04 <HAL_RCC_OscConfig+0x278>)
 80029cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ce:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f97e 	bl	8000cd4 <HAL_InitTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d052      	beq.n	8002a88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	e364      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d032      	beq.n	8002a54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a42      	ldr	r2, [pc, #264]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fa:	f7fe f9bb 	bl	8000d74 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a02:	f7fe f9b7 	bl	8000d74 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e34d      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a14:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a20:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a26:	f043 0308 	orr.w	r3, r3, #8
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b33      	ldr	r3, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4930      	ldr	r1, [pc, #192]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	492b      	ldr	r1, [pc, #172]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
 8002a52:	e01a      	b.n	8002a8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a5a:	f023 0301 	bic.w	r3, r3, #1
 8002a5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a60:	f7fe f988 	bl	8000d74 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a68:	f7fe f984 	bl	8000d74 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e31a      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1dc>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d073      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d005      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x21c>
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d10b      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d063      	beq.n	8002b7c <HAL_RCC_OscConfig+0x2f0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d15f      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e2f7      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e025      	b.n	8002b24 <HAL_RCC_OscConfig+0x298>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d114      	bne.n	8002b0c <HAL_RCC_OscConfig+0x280>
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a02      	ldr	r2, [pc, #8]	; (8002afc <HAL_RCC_OscConfig+0x270>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e013      	b.n	8002b24 <HAL_RCC_OscConfig+0x298>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	08004b00 	.word	0x08004b00
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000004 	.word	0x20000004
 8002b0c:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a9f      	ldr	r2, [pc, #636]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b9d      	ldr	r3, [pc, #628]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a9c      	ldr	r2, [pc, #624]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe f922 	bl	8000d74 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe f91e 	bl	8000d74 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e2b4      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b46:	4b92      	ldr	r3, [pc, #584]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x2a8>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe f90e 	bl	8000d74 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe f90a 	bl	8000d74 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e2a0      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6e:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2d0>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d060      	beq.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_OscConfig+0x310>
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d119      	bne.n	8002bca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d116      	bne.n	8002bca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9c:	4b7c      	ldr	r3, [pc, #496]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x328>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e27d      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb4:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	4973      	ldr	r1, [pc, #460]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc8:	e040      	b.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d023      	beq.n	8002c1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe f8c9 	bl	8000d74 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe f8c5 	bl	8000d74 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e25b      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf8:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b62      	ldr	r3, [pc, #392]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	061b      	lsls	r3, r3, #24
 8002c12:	495f      	ldr	r1, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
 8002c18:	e018      	b.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5c      	ldr	r2, [pc, #368]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe f8a5 	bl	8000d74 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe f8a1 	bl	8000d74 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e237      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c40:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d03c      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c60:	4b4b      	ldr	r3, [pc, #300]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	4a4a      	ldr	r2, [pc, #296]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe f880 	bl	8000d74 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c78:	f7fe f87c 	bl	8000d74 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e212      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ef      	beq.n	8002c78 <HAL_RCC_OscConfig+0x3ec>
 8002c98:	e01b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	4a3b      	ldr	r2, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f023 0301 	bic.w	r3, r3, #1
 8002ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7fe f863 	bl	8000d74 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fe f85f 	bl	8000d74 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e1f5      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc4:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1ef      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80a6 	beq.w	8002e2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0c:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCC_OscConfig+0x508>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d118      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_RCC_OscConfig+0x508>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <HAL_RCC_OscConfig+0x508>)
 8002d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d24:	f7fe f826 	bl	8000d74 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe f822 	bl	8000d74 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1b8      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_RCC_OscConfig+0x508>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d108      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4d8>
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d62:	e029      	b.n	8002db8 <HAL_RCC_OscConfig+0x52c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d115      	bne.n	8002d98 <HAL_RCC_OscConfig+0x50c>
 8002d6c:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d7c:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d8c:	e014      	b.n	8002db8 <HAL_RCC_OscConfig+0x52c>
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40007000 	.word	0x40007000
 8002d98:	4b9d      	ldr	r3, [pc, #628]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	4a9c      	ldr	r2, [pc, #624]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da8:	4b99      	ldr	r3, [pc, #612]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	4a98      	ldr	r2, [pc, #608]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d016      	beq.n	8002dee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fd ffd8 	bl	8000d74 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fd ffd4 	bl	8000d74 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e168      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dde:	4b8c      	ldr	r3, [pc, #560]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ed      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x53c>
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fd ffc1 	bl	8000d74 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fd ffbd 	bl	8000d74 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e151      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e0c:	4b80      	ldr	r3, [pc, #512]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ed      	bne.n	8002df6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1a:	7ffb      	ldrb	r3, [r7, #31]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e20:	4b7b      	ldr	r3, [pc, #492]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	4a7a      	ldr	r2, [pc, #488]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03c      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01c      	beq.n	8002e7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e40:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e46:	4a72      	ldr	r2, [pc, #456]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fd ff90 	bl	8000d74 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e58:	f7fd ff8c 	bl	8000d74 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e122      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e6a:	4b69      	ldr	r3, [pc, #420]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ef      	beq.n	8002e58 <HAL_RCC_OscConfig+0x5cc>
 8002e78:	e01b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e80:	4a63      	ldr	r2, [pc, #396]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8a:	f7fd ff73 	bl	8000d74 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e92:	f7fd ff6f 	bl	8000d74 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e105      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ea4:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1ef      	bne.n	8002e92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80f9 	beq.w	80030ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	f040 80cf 	bne.w	8003064 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ec6:	4b52      	ldr	r3, [pc, #328]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f003 0203 	and.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d12c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d123      	bne.n	8002f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d11b      	bne.n	8002f34 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d113      	bne.n	8002f34 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d071      	beq.n	8003018 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d068      	beq.n	800300c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f3a:	4b35      	ldr	r3, [pc, #212]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0ac      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f56:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002f5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f62:	f7fd ff07 	bl	8000d74 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fd ff03 	bl	8000d74 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e099      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f88:	4b21      	ldr	r3, [pc, #132]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCC_OscConfig+0x788>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fa2:	0212      	lsls	r2, r2, #8
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002faa:	0852      	lsrs	r2, r2, #1
 8002fac:	3a01      	subs	r2, #1
 8002fae:	0552      	lsls	r2, r2, #21
 8002fb0:	4311      	orrs	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fb6:	0852      	lsrs	r2, r2, #1
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0652      	lsls	r2, r2, #25
 8002fbc:	4311      	orrs	r1, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc2:	06d2      	lsls	r2, r2, #27
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	4912      	ldr	r1, [pc, #72]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a0c      	ldr	r2, [pc, #48]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8002fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fe4:	f7fd fec6 	bl	8000d74 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fd fec2 	bl	8000d74 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e058      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	4b04      	ldr	r3, [pc, #16]	; (8003010 <HAL_RCC_OscConfig+0x784>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800300a:	e050      	b.n	80030ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e04f      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
 8003010:	40021000 	.word	0x40021000
 8003014:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d144      	bne.n	80030ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 800302a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4a20      	ldr	r2, [pc, #128]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 8003036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800303c:	f7fd fe9a 	bl	8000d74 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fd fe96 	bl	8000d74 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e02c      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x7b8>
 8003062:	e024      	b.n	80030ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d01f      	beq.n	80030aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 8003070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fd fe7d 	bl	8000d74 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307e:	f7fd fe79 	bl	8000d74 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e00f      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	4905      	ldr	r1, [pc, #20]	; (80030b8 <HAL_RCC_OscConfig+0x82c>)
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_RCC_OscConfig+0x830>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	60cb      	str	r3, [r1, #12]
 80030a8:	e001      	b.n	80030ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	feeefffc 	.word	0xfeeefffc

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e11d      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b90      	ldr	r3, [pc, #576]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d910      	bls.n	8003108 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b8d      	ldr	r3, [pc, #564]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	498b      	ldr	r1, [pc, #556]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b89      	ldr	r3, [pc, #548]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e105      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b81      	ldr	r3, [pc, #516]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003120:	429a      	cmp	r2, r3
 8003122:	d908      	bls.n	8003136 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	497b      	ldr	r1, [pc, #492]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d079      	beq.n	8003236 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d11e      	bne.n	8003188 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314a:	4b75      	ldr	r3, [pc, #468]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0dc      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800315a:	f000 f9dd 	bl	8003518 <RCC_GetSysClockFreqFromPLLSource>
 800315e:	4603      	mov	r3, r0
 8003160:	4a70      	ldr	r2, [pc, #448]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d946      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003166:	4b6e      	ldr	r3, [pc, #440]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d140      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003172:	4b6b      	ldr	r3, [pc, #428]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317a:	4a69      	ldr	r2, [pc, #420]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 800317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003180:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e035      	b.n	80031f4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003190:	4b63      	ldr	r3, [pc, #396]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d115      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0b9      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a8:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0ad      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0a5      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80031c8:	f000 f8b4 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4a55      	ldr	r2, [pc, #340]	; (8003324 <HAL_RCC_ClockConfig+0x264>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d90f      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031d4:	4b52      	ldr	r3, [pc, #328]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e8:	4a4d      	ldr	r2, [pc, #308]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031f4:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 0203 	bic.w	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4947      	ldr	r1, [pc, #284]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003206:	f7fd fdb5 	bl	8000d74 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320c:	e00a      	b.n	8003224 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320e:	f7fd fdb1 	bl	8000d74 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e077      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003224:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 020c 	and.w	r2, r3, #12
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	429a      	cmp	r2, r3
 8003234:	d1eb      	bne.n	800320e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d105      	bne.n	8003248 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4a37      	ldr	r2, [pc, #220]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003246:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d010      	beq.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003260:	429a      	cmp	r2, r3
 8003262:	d208      	bcs.n	8003276 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b2e      	ldr	r3, [pc, #184]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	492b      	ldr	r1, [pc, #172]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d210      	bcs.n	80032a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 020f 	bic.w	r2, r3, #15
 800328c:	4923      	ldr	r1, [pc, #140]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCC_ClockConfig+0x25c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e036      	b.n	8003314 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4918      	ldr	r1, [pc, #96]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4910      	ldr	r1, [pc, #64]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e4:	f000 f826 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 80032e8:	4602      	mov	r2, r0
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCC_ClockConfig+0x260>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	490c      	ldr	r1, [pc, #48]	; (8003328 <HAL_RCC_ClockConfig+0x268>)
 80032f6:	5ccb      	ldrb	r3, [r1, r3]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_RCC_ClockConfig+0x26c>)
 8003302:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd fce3 	bl	8000cd4 <HAL_InitTick>
 800330e:	4603      	mov	r3, r0
 8003310:	73fb      	strb	r3, [r7, #15]

  return status;
 8003312:	7bfb      	ldrb	r3, [r7, #15]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40022000 	.word	0x40022000
 8003320:	40021000 	.word	0x40021000
 8003324:	04c4b400 	.word	0x04c4b400
 8003328:	08004b00 	.word	0x08004b00
 800332c:	20000000 	.word	0x20000000
 8003330:	20000004 	.word	0x20000004

08003334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334c:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x34>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d121      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d11e      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003368:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003374:	4b31      	ldr	r3, [pc, #196]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e005      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003390:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	e004      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d134      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0xa6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0xac>
 80033d8:	e005      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033da:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_RCC_GetSysClockFreq+0x110>)
 80033dc:	617b      	str	r3, [r7, #20]
      break;
 80033de:	e005      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_GetSysClockFreq+0x114>)
 80033e2:	617b      	str	r3, [r7, #20]
      break;
 80033e4:	e002      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	617b      	str	r3, [r7, #20]
      break;
 80033ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3301      	adds	r3, #1
 80033f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	fb03 f202 	mul.w	r2, r3, r2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	0e5b      	lsrs	r3, r3, #25
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	3301      	adds	r3, #1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800342c:	69bb      	ldr	r3, [r7, #24]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	08004b10 	.word	0x08004b10
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200

0800344c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_RCC_GetHCLKFreq+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000000 	.word	0x20000000

08003464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800347c:	f7ff f942 	bl	8002704 <HAL_PWREx_GetVoltageRange>
 8003480:	6178      	str	r0, [r7, #20]
 8003482:	e014      	b.n	80034ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800348a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348e:	6593      	str	r3, [r2, #88]	; 0x58
 8003490:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800349c:	f7ff f932 	bl	8002704 <HAL_PWREx_GetVoltageRange>
 80034a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034a2:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	4a1a      	ldr	r2, [pc, #104]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80034a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b4:	d10b      	bne.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b80      	cmp	r3, #128	; 0x80
 80034ba:	d913      	bls.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2ba0      	cmp	r3, #160	; 0xa0
 80034c0:	d902      	bls.n	80034c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034c2:	2302      	movs	r3, #2
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	e00d      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c8:	2301      	movs	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e00a      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b7f      	cmp	r3, #127	; 0x7f
 80034d2:	d902      	bls.n	80034da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80034d4:	2302      	movs	r3, #2
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	e004      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d101      	bne.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e0:	2301      	movs	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 020f 	bic.w	r2, r3, #15
 80034ec:	4909      	ldr	r1, [pc, #36]	; (8003514 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d001      	beq.n	8003506 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	40022000 	.word	0x40022000

08003518 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b03      	cmp	r3, #3
 800352c:	d00b      	beq.n	8003546 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d825      	bhi.n	8003580 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d008      	beq.n	800354c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d11f      	bne.n	8003580 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003542:	613b      	str	r3, [r7, #16]
    break;
 8003544:	e01f      	b.n	8003586 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003546:	4b25      	ldr	r3, [pc, #148]	; (80035dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003548:	613b      	str	r3, [r7, #16]
    break;
 800354a:	e01c      	b.n	8003586 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800354c:	4b21      	ldr	r3, [pc, #132]	; (80035d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003558:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	e005      	b.n	8003574 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003574:	4a1a      	ldr	r2, [pc, #104]	; (80035e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	613b      	str	r3, [r7, #16]
    break;
 800357e:	e002      	b.n	8003586 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003580:	2300      	movs	r3, #0
 8003582:	613b      	str	r3, [r7, #16]
    break;
 8003584:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	3301      	adds	r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	fb03 f202 	mul.w	r2, r3, r2
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0e5b      	lsrs	r3, r3, #25
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	3301      	adds	r3, #1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80035c6:	683b      	ldr	r3, [r7, #0]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40021000 	.word	0x40021000
 80035d8:	00f42400 	.word	0x00f42400
 80035dc:	007a1200 	.word	0x007a1200
 80035e0:	08004b10 	.word	0x08004b10

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d040      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d02a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d825      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800360c:	2b60      	cmp	r3, #96	; 0x60
 800360e:	d026      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003610:	2b60      	cmp	r3, #96	; 0x60
 8003612:	d821      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003614:	2b40      	cmp	r3, #64	; 0x40
 8003616:	d006      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003618:	2b40      	cmp	r3, #64	; 0x40
 800361a:	d81d      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003620:	2b20      	cmp	r3, #32
 8003622:	d010      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003624:	e018      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003626:	4b89      	ldr	r3, [pc, #548]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	4a88      	ldr	r2, [pc, #544]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800362c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003630:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003632:	e015      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fb02 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003644:	e00c      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3320      	adds	r3, #32
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fbed 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003656:	e003      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	74fb      	strb	r3, [r7, #19]
      break;
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800365e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003666:	4b79      	ldr	r3, [pc, #484]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003668:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800366c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003674:	4975      	ldr	r1, [pc, #468]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800367c:	e001      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d047      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d030      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369c:	d82a      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800369e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a2:	d02a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80036a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a8:	d824      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ae:	d008      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80036b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b4:	d81e      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036be:	d010      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036c0:	e018      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036c2:	4b62      	ldr	r3, [pc, #392]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	4a61      	ldr	r2, [pc, #388]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036ce:	e015      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fab4 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e0:	e00c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3320      	adds	r3, #32
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fb9f 	bl	8003e2c <RCCEx_PLLSAI2_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f2:	e003      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	74fb      	strb	r3, [r7, #19]
      break;
 80036f8:	e000      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80036fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003702:	4b52      	ldr	r3, [pc, #328]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003704:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	494e      	ldr	r1, [pc, #312]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003718:	e001      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 809f 	beq.w	800386a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372c:	2300      	movs	r3, #0
 800372e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003730:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00d      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	4a40      	ldr	r2, [pc, #256]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	6593      	str	r3, [r2, #88]	; 0x58
 8003752:	4b3e      	ldr	r3, [pc, #248]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800376e:	f7fd fb01 	bl	8000d74 <HAL_GetTick>
 8003772:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003774:	e009      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fd fafd 	bl	8000d74 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d902      	bls.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	74fb      	strb	r3, [r7, #19]
        break;
 8003788:	e005      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800378a:	4b31      	ldr	r3, [pc, #196]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ef      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d15b      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800379c:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d01f      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d019      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037c6:	4b21      	ldr	r3, [pc, #132]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4a1b      	ldr	r2, [pc, #108]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037e6:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fd fabc 	bl	8000d74 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fe:	e00b      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fd fab8 	bl	8000d74 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d902      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	74fb      	strb	r3, [r7, #19]
            break;
 8003816:	e006      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ec      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10c      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003844:	e008      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	74bb      	strb	r3, [r7, #18]
 800384a:	e005      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003858:	7c7b      	ldrb	r3, [r7, #17]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4ba0      	ldr	r3, [pc, #640]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	4a9f      	ldr	r2, [pc, #636]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003876:	4b9a      	ldr	r3, [pc, #616]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f023 0203 	bic.w	r2, r3, #3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	4996      	ldr	r1, [pc, #600]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003898:	4b91      	ldr	r3, [pc, #580]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	f023 020c 	bic.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	498e      	ldr	r1, [pc, #568]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ba:	4b89      	ldr	r3, [pc, #548]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	4985      	ldr	r1, [pc, #532]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038dc:	4b80      	ldr	r3, [pc, #512]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ea:	497d      	ldr	r1, [pc, #500]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038fe:	4b78      	ldr	r3, [pc, #480]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003904:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390c:	4974      	ldr	r1, [pc, #464]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003920:	4b6f      	ldr	r3, [pc, #444]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	496c      	ldr	r1, [pc, #432]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003942:	4b67      	ldr	r3, [pc, #412]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003950:	4963      	ldr	r1, [pc, #396]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003964:	4b5e      	ldr	r3, [pc, #376]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003972:	495b      	ldr	r1, [pc, #364]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003986:	4b56      	ldr	r3, [pc, #344]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	4952      	ldr	r1, [pc, #328]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a8:	4b4d      	ldr	r3, [pc, #308]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	494a      	ldr	r1, [pc, #296]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039ca:	4b45      	ldr	r3, [pc, #276]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d8:	4941      	ldr	r1, [pc, #260]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039ec:	4b3c      	ldr	r3, [pc, #240]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039fa:	4939      	ldr	r1, [pc, #228]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1c:	4930      	ldr	r1, [pc, #192]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	4a2b      	ldr	r2, [pc, #172]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a38:	60d3      	str	r3, [r2, #12]
 8003a3a:	e011      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 f8f9 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a56:	7cfb      	ldrb	r3, [r7, #19]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d04d      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a74:	d108      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003a76:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a7c:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a82:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a86:	e012      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003a88:	4b15      	ldr	r3, [pc, #84]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a8e:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa6:	490e      	ldr	r1, [pc, #56]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab6:	d106      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ac2:	60d3      	str	r3, [r2, #12]
 8003ac4:	e020      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ace:	d109      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ad0:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a02      	ldr	r2, [pc, #8]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	60d3      	str	r3, [r2, #12]
 8003adc:	e014      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f8a5 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d028      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b14:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b22:	4947      	ldr	r1, [pc, #284]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b32:	d106      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	4b42      	ldr	r3, [pc, #264]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a41      	ldr	r2, [pc, #260]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b3e:	60d3      	str	r3, [r2, #12]
 8003b40:	e011      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	2101      	movs	r1, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f876 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01e      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b72:	4b33      	ldr	r3, [pc, #204]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b82:	492f      	ldr	r1, [pc, #188]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f851 	bl	8003c44 <RCCEx_PLLSAI1_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc2:	f023 0204 	bic.w	r2, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bcc:	491c      	ldr	r1, [pc, #112]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003be6:	f023 0218 	bic.w	r2, r3, #24
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf0:	4913      	ldr	r1, [pc, #76]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d017      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c04:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c14:	490a      	ldr	r1, [pc, #40]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c26:	d105      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000

08003c44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c52:	4b72      	ldr	r3, [pc, #456]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00e      	beq.n	8003c7c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c5e:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0203 	and.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d103      	bne.n	8003c76 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
       ||
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d142      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	e03f      	b.n	8003cfc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d018      	beq.n	8003cb6 <RCCEx_PLLSAI1_Config+0x72>
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d825      	bhi.n	8003cd4 <RCCEx_PLLSAI1_Config+0x90>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d002      	beq.n	8003c92 <RCCEx_PLLSAI1_Config+0x4e>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d009      	beq.n	8003ca4 <RCCEx_PLLSAI1_Config+0x60>
 8003c90:	e020      	b.n	8003cd4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c92:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11d      	bne.n	8003cda <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ca2:	e01a      	b.n	8003cda <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ca4:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d116      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb4:	e013      	b.n	8003cde <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cb6:	4b59      	ldr	r3, [pc, #356]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cc2:	4b56      	ldr	r3, [pc, #344]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cd2:	e006      	b.n	8003ce2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd8:	e004      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d108      	bne.n	8003cfc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003cea:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4949      	ldr	r1, [pc, #292]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 8086 	bne.w	8003e10 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d04:	4b45      	ldr	r3, [pc, #276]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a44      	ldr	r2, [pc, #272]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d10:	f7fd f830 	bl	8000d74 <HAL_GetTick>
 8003d14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d16:	e009      	b.n	8003d2c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d18:	f7fd f82c 	bl	8000d74 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d902      	bls.n	8003d2c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	73fb      	strb	r3, [r7, #15]
        break;
 8003d2a:	e005      	b.n	8003d38 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d2c:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ef      	bne.n	8003d18 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d168      	bne.n	8003e10 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d44:	4b35      	ldr	r3, [pc, #212]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	06d2      	lsls	r2, r2, #27
 8003d58:	4311      	orrs	r1, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6852      	ldr	r2, [r2, #4]
 8003d5e:	3a01      	subs	r2, #1
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	430a      	orrs	r2, r1
 8003d64:	492d      	ldr	r1, [pc, #180]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]
 8003d6a:	e02d      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d115      	bne.n	8003d9e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d74:	691a      	ldr	r2, [r3, #16]
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6892      	ldr	r2, [r2, #8]
 8003d7e:	0211      	lsls	r1, r2, #8
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6912      	ldr	r2, [r2, #16]
 8003d84:	0852      	lsrs	r2, r2, #1
 8003d86:	3a01      	subs	r2, #1
 8003d88:	0552      	lsls	r2, r2, #21
 8003d8a:	4311      	orrs	r1, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	3a01      	subs	r2, #1
 8003d92:	0112      	lsls	r2, r2, #4
 8003d94:	430a      	orrs	r2, r1
 8003d96:	4921      	ldr	r1, [pc, #132]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	610b      	str	r3, [r1, #16]
 8003d9c:	e014      	b.n	8003dc8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6892      	ldr	r2, [r2, #8]
 8003daa:	0211      	lsls	r1, r2, #8
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6952      	ldr	r2, [r2, #20]
 8003db0:	0852      	lsrs	r2, r2, #1
 8003db2:	3a01      	subs	r2, #1
 8003db4:	0652      	lsls	r2, r2, #25
 8003db6:	4311      	orrs	r1, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6852      	ldr	r2, [r2, #4]
 8003dbc:	3a01      	subs	r2, #1
 8003dbe:	0112      	lsls	r2, r2, #4
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	4916      	ldr	r1, [pc, #88]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd4:	f7fc ffce 	bl	8000d74 <HAL_GetTick>
 8003dd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dda:	e009      	b.n	8003df0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ddc:	f7fc ffca 	bl	8000d74 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d902      	bls.n	8003df0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	73fb      	strb	r3, [r7, #15]
          break;
 8003dee:	e005      	b.n	8003dfc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ef      	beq.n	8003ddc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	4904      	ldr	r1, [pc, #16]	; (8003e1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	07ff800f 	.word	0x07ff800f
 8003e24:	ff9f800f 	.word	0xff9f800f
 8003e28:	f9ff800f 	.word	0xf9ff800f

08003e2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e3a:	4b72      	ldr	r3, [pc, #456]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e46:	4b6f      	ldr	r3, [pc, #444]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0203 	and.w	r2, r3, #3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d103      	bne.n	8003e5e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
       ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d142      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	e03f      	b.n	8003ee4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d018      	beq.n	8003e9e <RCCEx_PLLSAI2_Config+0x72>
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d825      	bhi.n	8003ebc <RCCEx_PLLSAI2_Config+0x90>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d002      	beq.n	8003e7a <RCCEx_PLLSAI2_Config+0x4e>
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d009      	beq.n	8003e8c <RCCEx_PLLSAI2_Config+0x60>
 8003e78:	e020      	b.n	8003ebc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e7a:	4b62      	ldr	r3, [pc, #392]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11d      	bne.n	8003ec2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8a:	e01a      	b.n	8003ec2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e8c:	4b5d      	ldr	r3, [pc, #372]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d116      	bne.n	8003ec6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e013      	b.n	8003ec6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e9e:	4b59      	ldr	r3, [pc, #356]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eaa:	4b56      	ldr	r3, [pc, #344]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eba:	e006      	b.n	8003eca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e004      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e002      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003eca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d108      	bne.n	8003ee4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ed2:	4b4c      	ldr	r3, [pc, #304]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4949      	ldr	r1, [pc, #292]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 8086 	bne.w	8003ff8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003eec:	4b45      	ldr	r3, [pc, #276]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a44      	ldr	r2, [pc, #272]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef8:	f7fc ff3c 	bl	8000d74 <HAL_GetTick>
 8003efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003efe:	e009      	b.n	8003f14 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f00:	f7fc ff38 	bl	8000d74 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d902      	bls.n	8003f14 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	73fb      	strb	r3, [r7, #15]
        break;
 8003f12:	e005      	b.n	8003f20 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f14:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ef      	bne.n	8003f00 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d168      	bne.n	8003ff8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d113      	bne.n	8003f54 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f2c:	4b35      	ldr	r3, [pc, #212]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	4b35      	ldr	r3, [pc, #212]	; (8004008 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6892      	ldr	r2, [r2, #8]
 8003f38:	0211      	lsls	r1, r2, #8
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	06d2      	lsls	r2, r2, #27
 8003f40:	4311      	orrs	r1, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6852      	ldr	r2, [r2, #4]
 8003f46:	3a01      	subs	r2, #1
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	492d      	ldr	r1, [pc, #180]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	614b      	str	r3, [r1, #20]
 8003f52:	e02d      	b.n	8003fb0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d115      	bne.n	8003f86 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <RCCEx_PLLSAI2_Config+0x1e0>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6892      	ldr	r2, [r2, #8]
 8003f66:	0211      	lsls	r1, r2, #8
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6912      	ldr	r2, [r2, #16]
 8003f6c:	0852      	lsrs	r2, r2, #1
 8003f6e:	3a01      	subs	r2, #1
 8003f70:	0552      	lsls	r2, r2, #21
 8003f72:	4311      	orrs	r1, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6852      	ldr	r2, [r2, #4]
 8003f78:	3a01      	subs	r2, #1
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	4921      	ldr	r1, [pc, #132]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	614b      	str	r3, [r1, #20]
 8003f84:	e014      	b.n	8003fb0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f86:	4b1f      	ldr	r3, [pc, #124]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f88:	695a      	ldr	r2, [r3, #20]
 8003f8a:	4b21      	ldr	r3, [pc, #132]	; (8004010 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	0211      	lsls	r1, r2, #8
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6952      	ldr	r2, [r2, #20]
 8003f98:	0852      	lsrs	r2, r2, #1
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	0652      	lsls	r2, r2, #25
 8003f9e:	4311      	orrs	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6852      	ldr	r2, [r2, #4]
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	0112      	lsls	r2, r2, #4
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	4916      	ldr	r1, [pc, #88]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a13      	ldr	r2, [pc, #76]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fc feda 	bl	8000d74 <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fc2:	e009      	b.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fc4:	f7fc fed6 	bl	8000d74 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d902      	bls.n	8003fd8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8003fd6:	e005      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ef      	beq.n	8003fc4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4904      	ldr	r1, [pc, #16]	; (8004004 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
 8004008:	07ff800f 	.word	0x07ff800f
 800400c:	ff9f800f 	.word	0xff9f800f
 8004010:	f9ff800f 	.word	0xf9ff800f

08004014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e049      	b.n	80040ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc fd5c 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 fb36 	bl	80046c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e047      	b.n	800416c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a23      	ldr	r2, [pc, #140]	; (8004178 <HAL_TIM_Base_Start+0xb4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01d      	beq.n	800412a <HAL_TIM_Base_Start+0x66>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f6:	d018      	beq.n	800412a <HAL_TIM_Base_Start+0x66>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <HAL_TIM_Base_Start+0xb8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d013      	beq.n	800412a <HAL_TIM_Base_Start+0x66>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_TIM_Base_Start+0xbc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00e      	beq.n	800412a <HAL_TIM_Base_Start+0x66>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <HAL_TIM_Base_Start+0xc0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d009      	beq.n	800412a <HAL_TIM_Base_Start+0x66>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_TIM_Base_Start+0xc4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIM_Base_Start+0x66>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_TIM_Base_Start+0xc8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d115      	bne.n	8004156 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_TIM_Base_Start+0xcc>)
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b06      	cmp	r3, #6
 800413a:	d015      	beq.n	8004168 <HAL_TIM_Base_Start+0xa4>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004142:	d011      	beq.n	8004168 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004154:	e008      	b.n	8004168 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e000      	b.n	800416a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004168:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40012c00 	.word	0x40012c00
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40013400 	.word	0x40013400
 800418c:	40014000 	.word	0x40014000
 8004190:	00010007 	.word	0x00010007

08004194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e04f      	b.n	800424c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <HAL_TIM_Base_Start_IT+0xc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d01d      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x76>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d6:	d018      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x76>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	; (800425c <HAL_TIM_Base_Start_IT+0xc8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x76>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1e      	ldr	r2, [pc, #120]	; (8004260 <HAL_TIM_Base_Start_IT+0xcc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x76>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_TIM_Base_Start_IT+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x76>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_TIM_Base_Start_IT+0xd4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_TIM_Base_Start_IT+0x76>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <HAL_TIM_Base_Start_IT+0xd8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d115      	bne.n	8004236 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_TIM_Base_Start_IT+0xdc>)
 8004212:	4013      	ands	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b06      	cmp	r3, #6
 800421a:	d015      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0xb4>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004222:	d011      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	e008      	b.n	8004248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e000      	b.n	800424a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40013400 	.word	0x40013400
 800426c:	40014000 	.word	0x40014000
 8004270:	00010007 	.word	0x00010007

08004274 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6a1a      	ldr	r2, [r3, #32]
 8004292:	f241 1311 	movw	r3, #4369	; 0x1111
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10f      	bne.n	80042bc <HAL_TIM_Base_Stop_IT+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	f240 4344 	movw	r3, #1092	; 0x444
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <HAL_TIM_Base_Stop_IT+0x48>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0202 	mvn.w	r2, #2
 8004306:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f9b2 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 8004322:	e005      	b.n	8004330 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f9a4 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f9b5 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d020      	beq.n	8004382 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d01b      	beq.n	8004382 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f06f 0204 	mvn.w	r2, #4
 8004352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f98c 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 800436e:	e005      	b.n	800437c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f97e 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f98f 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d020      	beq.n	80043ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01b      	beq.n	80043ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f06f 0208 	mvn.w	r2, #8
 800439e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2204      	movs	r2, #4
 80043a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f966 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 80043ba:	e005      	b.n	80043c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f958 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f969 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01b      	beq.n	800441a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0210 	mvn.w	r2, #16
 80043ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2208      	movs	r2, #8
 80043f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f940 	bl	8004686 <HAL_TIM_IC_CaptureCallback>
 8004406:	e005      	b.n	8004414 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f932 	bl	8004672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f943 	bl	800469a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00c      	beq.n	800443e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0201 	mvn.w	r2, #1
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fb ff51 	bl	80002e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00c      	beq.n	800446c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fafe 	bl	8004a68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 faf6 	bl	8004a7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8fd 	bl	80046ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0220 	mvn.w	r2, #32
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fabe 	bl	8004a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_TIM_ConfigClockSource+0x1c>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e0b6      	b.n	800466a <HAL_TIM_ConfigClockSource+0x18a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004538:	d03e      	beq.n	80045b8 <HAL_TIM_ConfigClockSource+0xd8>
 800453a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453e:	f200 8087 	bhi.w	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004546:	f000 8086 	beq.w	8004656 <HAL_TIM_ConfigClockSource+0x176>
 800454a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454e:	d87f      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d01a      	beq.n	800458a <HAL_TIM_ConfigClockSource+0xaa>
 8004554:	2b70      	cmp	r3, #112	; 0x70
 8004556:	d87b      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004558:	2b60      	cmp	r3, #96	; 0x60
 800455a:	d050      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x11e>
 800455c:	2b60      	cmp	r3, #96	; 0x60
 800455e:	d877      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004560:	2b50      	cmp	r3, #80	; 0x50
 8004562:	d03c      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xfe>
 8004564:	2b50      	cmp	r3, #80	; 0x50
 8004566:	d873      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004568:	2b40      	cmp	r3, #64	; 0x40
 800456a:	d058      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x13e>
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d86f      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004570:	2b30      	cmp	r3, #48	; 0x30
 8004572:	d064      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15e>
 8004574:	2b30      	cmp	r3, #48	; 0x30
 8004576:	d86b      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004578:	2b20      	cmp	r3, #32
 800457a:	d060      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15e>
 800457c:	2b20      	cmp	r3, #32
 800457e:	d867      	bhi.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05c      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15e>
 8004584:	2b10      	cmp	r3, #16
 8004586:	d05a      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x15e>
 8004588:	e062      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800459a:	f000 f9b3 	bl	8004904 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	609a      	str	r2, [r3, #8]
      break;
 80045b6:	e04f      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045c8:	f000 f99c 	bl	8004904 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045da:	609a      	str	r2, [r3, #8]
      break;
 80045dc:	e03c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 f910 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2150      	movs	r1, #80	; 0x50
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f969 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 80045fc:	e02c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800460a:	461a      	mov	r2, r3
 800460c:	f000 f92f 	bl	800486e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2160      	movs	r1, #96	; 0x60
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f959 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 800461c:	e01c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800462a:	461a      	mov	r2, r3
 800462c:	f000 f8f0 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2140      	movs	r1, #64	; 0x40
 8004636:	4618      	mov	r0, r3
 8004638:	f000 f949 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 800463c:	e00c      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f000 f940 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 800464e:	e003      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e000      	b.n	8004658 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a46      	ldr	r2, [pc, #280]	; (80047f0 <TIM_Base_SetConfig+0x12c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d013      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e2:	d00f      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a43      	ldr	r2, [pc, #268]	; (80047f4 <TIM_Base_SetConfig+0x130>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00b      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a42      	ldr	r2, [pc, #264]	; (80047f8 <TIM_Base_SetConfig+0x134>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d007      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a41      	ldr	r2, [pc, #260]	; (80047fc <TIM_Base_SetConfig+0x138>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a40      	ldr	r2, [pc, #256]	; (8004800 <TIM_Base_SetConfig+0x13c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d108      	bne.n	8004716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a35      	ldr	r2, [pc, #212]	; (80047f0 <TIM_Base_SetConfig+0x12c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01f      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004724:	d01b      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a32      	ldr	r2, [pc, #200]	; (80047f4 <TIM_Base_SetConfig+0x130>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d017      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a31      	ldr	r2, [pc, #196]	; (80047f8 <TIM_Base_SetConfig+0x134>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a30      	ldr	r2, [pc, #192]	; (80047fc <TIM_Base_SetConfig+0x138>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <TIM_Base_SetConfig+0x13c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <TIM_Base_SetConfig+0x140>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2d      	ldr	r2, [pc, #180]	; (8004808 <TIM_Base_SetConfig+0x144>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_Base_SetConfig+0x9a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2c      	ldr	r2, [pc, #176]	; (800480c <TIM_Base_SetConfig+0x148>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d108      	bne.n	8004770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <TIM_Base_SetConfig+0x12c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00f      	beq.n	80047bc <TIM_Base_SetConfig+0xf8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a18      	ldr	r2, [pc, #96]	; (8004800 <TIM_Base_SetConfig+0x13c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00b      	beq.n	80047bc <TIM_Base_SetConfig+0xf8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a17      	ldr	r2, [pc, #92]	; (8004804 <TIM_Base_SetConfig+0x140>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_Base_SetConfig+0xf8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a16      	ldr	r2, [pc, #88]	; (8004808 <TIM_Base_SetConfig+0x144>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0xf8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <TIM_Base_SetConfig+0x148>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d103      	bne.n	80047c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f023 0201 	bic.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]
  }
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40013400 	.word	0x40013400
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800

08004810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0201 	bic.w	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 030a 	bic.w	r3, r3, #10
 800484c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800486e:	b480      	push	{r7}
 8004870:	b087      	sub	sp, #28
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f023 0210 	bic.w	r2, r3, #16
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004898:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	031b      	lsls	r3, r3, #12
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f043 0307 	orr.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	021a      	lsls	r2, r3, #8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	431a      	orrs	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4313      	orrs	r3, r2
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	609a      	str	r2, [r3, #8]
}
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004958:	2302      	movs	r3, #2
 800495a:	e068      	b.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2e      	ldr	r2, [pc, #184]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2d      	ldr	r2, [pc, #180]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d108      	bne.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004996:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01d      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d018      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1b      	ldr	r2, [pc, #108]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1a      	ldr	r2, [pc, #104]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d00e      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10c      	bne.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	40013400 	.word	0x40013400
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40014000 	.word	0x40014000

08004a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <memset>:
 8004a90:	4402      	add	r2, r0
 8004a92:	4603      	mov	r3, r0
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d100      	bne.n	8004a9a <memset+0xa>
 8004a98:	4770      	bx	lr
 8004a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a9e:	e7f9      	b.n	8004a94 <memset+0x4>

08004aa0 <__libc_init_array>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4d0d      	ldr	r5, [pc, #52]	; (8004ad8 <__libc_init_array+0x38>)
 8004aa4:	4c0d      	ldr	r4, [pc, #52]	; (8004adc <__libc_init_array+0x3c>)
 8004aa6:	1b64      	subs	r4, r4, r5
 8004aa8:	10a4      	asrs	r4, r4, #2
 8004aaa:	2600      	movs	r6, #0
 8004aac:	42a6      	cmp	r6, r4
 8004aae:	d109      	bne.n	8004ac4 <__libc_init_array+0x24>
 8004ab0:	4d0b      	ldr	r5, [pc, #44]	; (8004ae0 <__libc_init_array+0x40>)
 8004ab2:	4c0c      	ldr	r4, [pc, #48]	; (8004ae4 <__libc_init_array+0x44>)
 8004ab4:	f000 f818 	bl	8004ae8 <_init>
 8004ab8:	1b64      	subs	r4, r4, r5
 8004aba:	10a4      	asrs	r4, r4, #2
 8004abc:	2600      	movs	r6, #0
 8004abe:	42a6      	cmp	r6, r4
 8004ac0:	d105      	bne.n	8004ace <__libc_init_array+0x2e>
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac8:	4798      	blx	r3
 8004aca:	3601      	adds	r6, #1
 8004acc:	e7ee      	b.n	8004aac <__libc_init_array+0xc>
 8004ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad2:	4798      	blx	r3
 8004ad4:	3601      	adds	r6, #1
 8004ad6:	e7f2      	b.n	8004abe <__libc_init_array+0x1e>
 8004ad8:	08004b40 	.word	0x08004b40
 8004adc:	08004b40 	.word	0x08004b40
 8004ae0:	08004b40 	.word	0x08004b40
 8004ae4:	08004b44 	.word	0x08004b44

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
